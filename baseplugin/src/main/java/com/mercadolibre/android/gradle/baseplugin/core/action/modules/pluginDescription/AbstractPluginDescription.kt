package com.mercadolibre.android.gradle.baseplugin.core.action.modules.pluginDescription

import com.mercadolibre.android.gradle.baseplugin.core.action.utils.OutputUtils
import com.mercadolibre.android.gradle.baseplugin.core.components.MELI_SUB_GROUP
import com.mercadolibre.android.gradle.baseplugin.core.components.PLUGIN_DESCRIPTION_DESCRIPTION
import com.mercadolibre.android.gradle.baseplugin.core.components.PLUGIN_MODULES_DESCRIPTION_TASK
import com.mercadolibre.android.gradle.baseplugin.core.domain.interfaces.Module
import org.gradle.api.Project
import org.gradle.api.Task

/**
 * The AbstractModule Plugin Description class is in charge of providing the basic functionalities that the modules that describe a
 * Module Configurer must have.
 *
 * @param taskName This variable contains the name of the description task.
 * @param title This variable contains the name title to be described.
 * @param subTitle This variable contains the name subtitle to be described.
 * @param content This lambda contains the content that will be displayed as a description.
 */
abstract class AbstractPluginDescription(
    val taskName: String,
    private val title: String,
    private val subTitle: String,
    val content: () -> String
) : Module() {

    /**
     * This is the method in charge of generating the module description task and adding it to the main plugin description task.
     */
    override fun configure(project: Project) {
        if (!taskExist(project.rootProject)) {
            configureTask(createTask(project))
            finalizeByModuleDescriptionTask(project)
        }
    }

    private fun taskExist(project: Project): Boolean {
        return project.tasks.names.contains(taskName)
    }

    private fun finalizeByModuleDescriptionTask(project: Project) {
        project.rootProject.tasks.findByName(PLUGIN_MODULES_DESCRIPTION_TASK)?.finalizedBy(taskName)
    }

    private fun createTask(project: Project): Task {
        return project.rootProject.tasks.register(taskName).get()
    }

    /**
     * This method is responsible for configuring the operation of the task.
     */
    private fun configureTask(task: Task) {
        with(task) {
            group = MELI_SUB_GROUP
            description = PLUGIN_DESCRIPTION_DESCRIPTION

            doLast {
                printMessage(makeLog(subTitle, content()), title)
            }
        }
    }

    /**
     * This method is responsible for printing the message generated by the task.
     */
    fun printMessage(message: String, title: String) {
        OutputUtils.logMessage(listOf(title, message))
    }

    /**
     * This method is responsible for generating the message that will be displayed by the console.
     */
    fun makeLog(subTitle: String, contentMessage: String): String = "- $subTitle\n$contentMessage"
}
